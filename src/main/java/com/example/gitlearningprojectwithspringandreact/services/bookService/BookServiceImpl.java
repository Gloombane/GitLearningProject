package com.example.gitlearningprojectwithspringandreact.services.bookService;

import com.example.gitlearningprojectwithspringandreact.entities.Book;
import com.example.gitlearningprojectwithspringandreact.entities.BookCategory;
import com.example.gitlearningprojectwithspringandreact.entities.BookCreateDTO;
import com.example.gitlearningprojectwithspringandreact.entities.Stock;
import com.example.gitlearningprojectwithspringandreact.repositories.BorrowedBookRepository;
import com.example.gitlearningprojectwithspringandreact.repositories.bookCategoryRepository.BookCategoryRepository;
import com.example.gitlearningprojectwithspringandreact.services.bookService.BookService;
import org.springframework.stereotype.Service;
import com.example.gitlearningprojectwithspringandreact.repositories.bookRepository.BookRepository;

import java.time.LocalDate;
import java.util.List;

@Service
public class BookServiceImpl implements BookService {
    private final BookRepository bookRepository;
    private final BookCategoryRepository bookCategoryRepository;
    private final BorrowedBookRepository borrowedBookRepository;

    public BookServiceImpl(BookRepository bookRepository, BookCategoryRepository bookCategoryRepository, BorrowedBookRepository borrowedBookRepository) {
        this.bookRepository = bookRepository;
        this.bookCategoryRepository = bookCategoryRepository;
        this.borrowedBookRepository = borrowedBookRepository;
    }


    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–Ω–∏–≥–∏
    @Override
    public List<Book> getAllBooks() {
        return bookRepository.findAllWithCategory();
    }

    // –ü–æ–ª—É—á–∏—Ç—å –∫–Ω–∏–≥—É –ø–æ ID
    @Override
    public Book getBookById(Long id) {
        return bookRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å id: " + id));
    }

    @Override
    public void saveBook(BookCreateDTO request) {
        if (request.getReleaseDate().isAfter(LocalDate.now())) {
            throw new IllegalArgumentException("–î–∞—Ç–∞ –≤—ã–ø—É—Å–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º");
        }

        BookCategory category = bookCategoryRepository.findById(Math.toIntExact(request.getCategoryId()))
                .orElseThrow(() -> new RuntimeException("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));

        Book book = Book.builder()
                .bookName(request.getBookName())
                .authorName(request.getAuthorName())
                .releaseDate(request.getReleaseDate())
                .bookImage(request.getBookImage())
                .bookCategory(category)
                .build();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–Ω–∏–≥—É –±–µ–∑ —Å—Ç–æ–∫–∞
        Book savedBook = bookRepository.save(book);

        // –°–æ–∑–¥–∞—ë–º —Å—Ç–æ–∫ –¥–ª—è –∫–Ω–∏–≥–∏
        Stock stock = Stock.builder()
                .book(savedBook)
                .quantity(request.getQuantity()) // ‚úÖ –±–µ—Ä—ë–º –∏–∑ DTO
                .build();

        savedBook.setStock(stock);

        bookRepository.save(savedBook); // –ø–æ–≤—Ç–æ—Ä–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å –ø—Ä–∏–≤—è–∑–∫–æ–π —Å—Ç–æ–∫–∞
    }



    @Override
    public void updateBook(Long id, BookCreateDTO updatedBook) {
        Book existingBook = bookRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å id: " + id));

        if (updatedBook.getReleaseDate() != null && updatedBook.getReleaseDate().isAfter(LocalDate.now())) {
            throw new IllegalArgumentException("–î–∞—Ç–∞ –≤—ã–ø—É—Å–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.");
        }

        BookCategory category = bookCategoryRepository.findById(Math.toIntExact(updatedBook.getCategoryId()))
                .orElseThrow(() -> new RuntimeException("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å id: " + updatedBook.getCategoryId()));

        existingBook.setBookName(updatedBook.getBookName());
        existingBook.setAuthorName(updatedBook.getAuthorName());
        existingBook.setReleaseDate(updatedBook.getReleaseDate());
        existingBook.setBookImage(updatedBook.getBookImage());
        existingBook.setBookCategory(category);

        // üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ —Å—Ç–æ–∫–µ
        if (updatedBook.getQuantity() != null) {
            Stock stock = existingBook.getStock();
            if (stock == null) {
                stock = Stock.builder()
                        .book(existingBook)
                        .quantity(updatedBook.getQuantity())
                        .build();
                existingBook.setStock(stock);
            } else {
                stock.setQuantity(updatedBook.getQuantity());
            }
        }

        bookRepository.save(existingBook);
    }


    @Override
    public void deleteBookById(Long id) {
        Book existingBook = bookRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å id: " + id));

        // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∑—è—Ç–∞ –ª–∏ –∫–Ω–∏–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        if (borrowedBookRepository.existsByBook(existingBook)) {
            throw new IllegalStateException("–≠—Ç–∞ –∫–Ω–∏–≥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–∞, –ø–æ–∫–∞ –æ–Ω–∞ –≤–∑—è—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.");
        }

        bookRepository.delete(existingBook);
    }


    @Override
    public List<Book> getBooksByCategory(Long genreId) {
        return bookRepository.findByCategoryId(genreId);
    }

}
